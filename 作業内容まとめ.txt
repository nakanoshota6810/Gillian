各作業内容

◆月曜日(2021/10/18)のスケジュール
・11：00～12：00 企画設計
　テーマから基本的な企画設計を行う。
　企画設計自体は1時間を目安にし、その後はすぐに作業に入る。

・12：00～13：00 素材集め　環境設定
　企画設計後、必要となる素材を集める。
　テーマがブロック崩しなので、Unity上のオブジェクトのみでできると判断。
　実際にオブジェクトの配置などして、必要となるものを揃える。
　その他、スクリプトを開くのにVisualStudio2017が立ち上がったので、
　2019に切り替えるなど環境設定を行った。

・14：00～18：00 ステージ設計
　ステージ、ブロックの挙動などゲーム開始時の画面構築を行う。
　このゲームは、上からブロックが重力で落ちてくる想定(Unityの物理演算使用)なので、
　出現時は通常の落下速度とし、一定のラインで落下速度を鈍化させる処理を実装。
　ゲーム開始時にまとまったブロック群を出現させる処理を実装。
　ゲーム中に一定ごとに上からブロックを生成する処理を実装。
　生成されたブロックの色をランダム(赤、緑、青のいずれか)に設定する機能を実装。
　この地点で、ブロック崩しのステージ部分の実装は概ね完了。　

・18：00～19：00 プレイヤーの挙動
　当初、ブロック崩しの概念を勘違いしており、下から玉を発射する仕組みとなる。
　プレイヤーを左右に動かす処理を実装。
　プレイヤーの位置から上に玉を発射する処理を実装(のちに変更)


◆火曜日(2021/10/19)のスケジュール
・10：00～11：00 企画修正
　ブロック崩しの概念を勘違いしていたため、再度企画設計。
　主に、プレイヤーの挙動周りを書き直す。
　ブロック崩しの内容通り、玉をはじいてブロックを
　これにより、実質的に企画が定まる。

・11：00～13：00 玉の挙動の修正
　Unityの物理演算を使用していると、玉の速さが変化してしまう不具合を修正する作業。
　Unity内の機能では解決できなかったので、x軸とy軸の移動速度の比率から、
　速さを一定に保つ処理を実装。

・14：00～16：00　玉の色ごとにブロックを消滅させる機能、ブロックの連鎖消滅
　玉とブロックに色情報を持たせ、接触時の色情報をもとに処理を行う機能を実装。
　単色のブロックと混合色のブロックとで、処理を分ける。
　混合色ブロックを消滅させることで、その地点から上左右一直線のブロックを全消しする機能を実装。
　これにより、ブロック崩しとしての機能は実装を完了した。

・16：00～19：00　ゲームスタート機能、ゲームオーバー機能、リトライ機能
　ブロック崩しはできたので、アウトゲーム部分を実装。
　リトライ時にシーン切り替えを行う処理を選択し、同じシーンを再読み込みさせ、
　再度ゲームを開始できるよう実装。

◆水曜日(2021/10/20)のスケジュール
・10：00～13：00 スコア機能
　ゲームのボリュームを上げるため、スコア機能の仕様を追加。
　ゲームオーバーをリザルトに変更し、スコアを確認できるよう変更。
　ブロック破壊数、最大コンボ、スコアの計算ができるように実装。

・14：00～15：00 インゲーム中のコンボ数表示
　ゲーム中にコンボ数を表示できるように、使用を追加。
　見える位置など、少し調整を入れる。

・15：00～16：00 エフェクトの追加
　混合色ブロックを消滅させたときの上左右一直線全消し時のエフェクトを実装。

・16：00～18：00 ボリューム増加　
　ゲームモードを3つに分離。
　内容はそこまで変わらないが、実質的に3ステージを実装。
　タイトル画面でゲームモードを選ぶ機能を実装。
　この地点で、企画内容すべての機能を実装完了した。

・18：00～19：00 リファクタリング作業(ブロックの挙動部分)
　全体的に機能優先でコーディングをしていたので、本格的にリファクタリング開始。
　がんじがらめになっている要素を解体し、振り分ける途中でタイムリミット。
　


◆木曜日(2021/10/20)のスケジュール
・10：00～15：00(1時間省く) リファクタリング作業(ブロックの挙動部分)
　最もがんじがらめになっている箇所であり、全て解体し再構築するのに多くの時間を費す。
　正直のところ、設計に関して自信がなく、ネットで調べながらの作業であり、苦戦する。
　まとまった時間があれば、そのあたりを勉強したいと考える。
　結果的に、インターフェースを使用して整理整頓する形にまとまる。

・16：00～19：00　リファクタリング作業(ステージの挙動部分)
　コードの解体作業とともに、必要な文だけブロックを生成する機能に変更。
　しかし、消滅したブロックに参照が飛ぶなどの不具合が生じ、改善のため時間を費やす。
　コード自体はかなり見やすくなったが、手を加えたぶん、さらなる不具合が生じている可能性あり。